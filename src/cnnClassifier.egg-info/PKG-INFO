Metadata-Version: 2.4
Name: cnnClassifier
Version: 0.0.0
Summary: A small Python package for CNN app (Kidney Disease Detection)
Home-page: https://github.com/tusharchaudharryy/Kidney-Disease-Deep-Learning-Model
Author: tusharchaudharryy
Author-email: chaudharytushar477@gmail.com
Project-URL: Bug Tracker, https://github.com/tusharchaudharryy/Kidney-Disease-Deep-Learning-Model/issues
Classifier: Programming Language :: Python :: 3.12
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: project-url
Dynamic: summary


# Kidney-Disease-Deep-Learning-Model

## ✅ Project Status: Completed (Core Modular ML System)

This repository contains a modular, production-grade Deep Learning pipeline for classifying kidney disease from medical data.

---

## 🚀 Workflows Implemented

1. ✅ `config.yaml` updated with modular configuration.
2. ✅ `params.yaml` updated for training parameters.
3. ✅ `src/config/configuration.py` for configuration management.
4. ✅ Modular `components` implemented (e.g., data ingestion, preprocessing, model trainer, etc.).
5. ✅ Pipeline orchestration defined and implemented.
6. ✅ `main.py` for end-to-end training pipeline execution.
7. ✅ `app.py` Flask-based prediction web app.
8. ✅ Logging and exception handling integrated.
9. ✅ Unit tests included (optional but supported).
10. ✅ MLflow logging and tracking added.

---

## 🧑‍💻 How to run locally?

### Step 1: Clone the repository

```bash
git clone https://github.com/tusharchaudharryy/Kidney-Disease-Deep-Learning-Model.git
cd Kidney-Disease-Deep-Learning-Model
```

### Step 2: Create and activate a Conda environment

```bash
conda create -n cnncls python=3.8 -y
conda activate cnncls
```

### Step 3: Install dependencies

```bash
pip install -r requirements.txt
```

### Step 4: Run the application

```bash
python app.py
```

Then open your browser and visit:

```bash
http://127.0.0.1:5000
```

---

## 📊 MLflow Integration

MLflow is used for experiment tracking and visualization.

To run:

```bash
mlflow ui
```

Then open:

```
http://127.0.0.1:5000
```

**Optional Cloud Logging (Future Task):**  
> Cloud-based tracking with DagsHub or AWS can be configured later by setting `MLFLOW_TRACKING_URI`, `USERNAME`, and `PASSWORD`.

---

## 📦 DVC (Data Version Control)

> **Not implemented in this version.**  
DVC setup is **planned for future versions** to enable better experiment tracking, orchestration, and reproducibility.

---

## ☁️ AWS CI/CD Deployment with GitHub Actions

> **Not implemented in this version.**  
Full cloud deployment using GitHub Actions, Docker, ECR, and EC2 is **planned as a future enhancement**.

---

## ✅ Completed

- ✅ Modular Deep Learning pipeline
- ✅ Web app (`Flask`) for predictions
- ✅ MLflow tracking
- ✅ Local training and inference
- ✅ Proper folder structure and configuration management

---

## 🧭 Future Tasks

- ⏳ DVC integration
- ⏳ AWS-based deployment
- ⏳ GitHub Actions CI/CD pipeline
- ⏳ Streamlit or Gradio UI for more interactive usage

---
